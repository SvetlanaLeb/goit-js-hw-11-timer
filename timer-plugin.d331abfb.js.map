{"version":3,"sources":["timer-plugin.js"],"names":["CountdownTimer","constructor","selector","targetDate","start","setInterval","startTime","Date","now","deltaTime","time","getTimeComponents","updateClockFace","days","pad","Math","floor","hours","mins","secs","value","String","padStart","selectTimerByID","refs","daysText","document","querySelector","hoursText","minsText","secsText","textContent","countdownTimer"],"mappings":";;;AAgEA,aAhEA,QAAA,oBAIA,MAAMA,EAEFC,aAAY,SAAEC,EAAF,WAAYC,IAEfA,KAAAA,WAAaA,EACbD,KAAAA,SAAWA,EAGpBE,QACUD,MAAAA,EAAa,KAAKA,WAExBE,YAAY,KACFC,MAAAA,EAAYC,KAAKC,MACjBC,EAAYN,EAAaG,EACzBI,EAAO,KAAKC,kBAAkBF,GAE/BG,KAAAA,gBAAgBF,IACtB,KAEPC,kBAAkBD,GAOP,MAAA,CAAEG,KALI,KAAKC,IAAIC,KAAKC,MAAMN,EAAQ,QAK1BO,MAJD,KAAKH,IAAIC,KAAKC,MAAON,EAAQ,MAAyB,OAI9CQ,KAHT,KAAKJ,IAAIC,KAAKC,MAAON,EAAQ,KAAoB,MAGlCS,KAFf,KAAKL,IAAIC,KAAKC,MAAON,EAAQ,IAAc,OAI5DI,IAAIM,GACOC,OAAAA,OAAOD,GAAOE,SAAS,EAAG,KAGrCC,kBACUrB,MAAAA,EAAW,KAAKA,SAOfsB,MANO,CACVC,SAAUC,SAASC,iBAAiBzB,6BACpC0B,UAAWF,SAASC,iBAAiBzB,8BACrC2B,SAAUH,SAASC,iBAAiBzB,6BACpC4B,SAAUJ,SAASC,iBAAiBzB,8BAI5CU,iBAAgB,KAAEC,EAAF,MAAQI,EAAR,KAAeC,EAAf,KAAqBC,IAC/BK,MAAAA,EAAO,KAAKD,kBAElBC,EAAKC,SAASM,eAAiBlB,IAC/BW,EAAKI,UAAUG,eAAiBd,IAChCO,EAAKK,SAASE,eAAiBb,IAC/BM,EAAKM,SAASC,eAAiBZ,KAMnC,MAAMa,EAAiB,IAAIhC,EAAe,CACtCE,SAAU,WACVC,WAAY,IAAII,KAAK,kBAIzByB,EAAe5B","file":"timer-plugin.d331abfb.js","sourceRoot":"../src","sourcesContent":["import './css/common.css';\n\n\n\nclass CountdownTimer {\n\n    constructor({ selector, targetDate} ) {\n      \n        this.targetDate = targetDate;\n        this.selector = selector;\n\n    }\n    start() {\n        const targetDate = this.targetDate;\n\n        setInterval(() => {\n            const startTime = Date.now();\n            const deltaTime = targetDate - startTime;\n            const time = this.getTimeComponents(deltaTime);\n\n            this.updateClockFace(time);\n        }, 1000)\n    }\n    getTimeComponents(time) {\n\n        const days = this.pad(Math.floor(time / (1000 * 60 * 60 * 24)));\n        const hours = this.pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\n        const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n        const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));\n\n        return { days, hours, mins, secs };\n    }\n    pad(value) {\n        return String(value).padStart(2, '0');\n    };\n\n    selectTimerByID() {\n        const selector = this.selector;\n        const  refs = {\n            daysText: document.querySelector(`${selector} span[data-value=\"days\"]`),\n            hoursText: document.querySelector(`${selector} span[data-value=\"hours\"]`),\n            minsText: document.querySelector(`${selector} span[data-value=\"mins\"]`),\n            secsText: document.querySelector(`${selector} span[data-value=\"secs\"]`),\n        };\n        return refs\n    };\n    updateClockFace({ days, hours, mins, secs }) {\n    const refs = this.selectTimerByID();\n        \n    refs.daysText.textContent = `${days}`;\n    refs.hoursText.textContent = `${hours}`;\n    refs.minsText.textContent = `${mins}`;\n    refs.secsText.textContent = `${secs}`;\n    \n    };\n    \n};\n\nconst countdownTimer = new CountdownTimer({\n    selector: '#timer-1',\n    targetDate: new Date('Jul 19, 2021'),\n});\n\n\ncountdownTimer.start();\n\n\n\n\n\n"]}